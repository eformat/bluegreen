apiVersion: v1
kind: BuildConfig
metadata:
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "bluegreen", "namespace": "", "kind":
      "DeploymentConfig"}]'
  creationTimestamp: null
  labels:
    app: bluegreen-pipeline
    name: bluegreen-pipeline
  name: bluegreen-pipeline
spec:
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |
        #!groovy
        pipeline {
            environment {
                def appName = "bluegreen"
                def tag = "blue"
                def altTag = "green"
            }
            options {
                // set a timeout of 20 minutes for this pipeline
                timeout(time: 20, unit: 'MINUTES')
            }
            agent {
                node {
                    label 'nodejs'
                }
            }
            stages {
                stage("Initialize") {
                    steps {
                        script {
                            openshift.withProject(env.PROJECT_NAME) {
                                sh "oc get route ${appName} -o jsonpath='{ .spec.to.name }' > activeservice"
                                activeService = readFile('activeservice').trim()
                                if (activeService == "blue") {
                                    tag = "green"
                                    altTag = "blue"
                                }
                                sh "oc get route ${tag} -o jsonpath='{ .spec.host }' > routehost"
                                routeHost = readFile('routehost').trim()
                            }
                        }
                    }
                }

                stage('build') {
                    steps {
                        script {
                            openshift.withProject(env.PROJECT_NAME) {
                                echo "building tag ${tag}"
                                def bld = openshift.startBuild("${tag}")
                                bld.untilEach {
                                    return it.object().status.phase == "Running"
                                }
                                bld.logs('-f')
                            }
                        }
                    }
                }

                stage('deploy') {
                    steps {
                        script {
                            openshift.withProject(env.PROJECT_NAME) {
                                def dc = openshift.selector('dc', "${tag}")
                                dc.rollout().status("-w")
                            }
                        }
                    }
                }

                stage("Test") {
                    steps {
                        script {
                            input message: "Test deployment: http://${routeHost}. Approve?", id: "approval"
                        }
                    }
                }

                stage("Go Live") {
                    steps {
                        script {
                            openshift.withProject(env.PROJECT_NAME) {
                                def patch1 = $/oc patch route/bluegreen -p $'{\"spec\":{\"to\":{\"name\":\"${tag}\"}}}$'/$
                                sh patch1
                            }
                        }
                    }
                }

                stage("Rollback") {
                    steps {
                        script {
                            openshift.withProject(env.PROJECT_NAME) {
                                sh "oc get route ${altTag} -o jsonpath='{ .spec.host }' > routehost"
                                routeHost = readFile('routehost').trim()
                                def patch2 = $/oc patch route/bluegreen -p $'{\"spec\":{\"to\":{\"name\":\"${altTag}\"}}}$'/$
                                try {
                                    input message: "Rollback deployment: http://${routeHost}. Approve?", id: "approval"
                                    echo "rolling back to ${tag}"
                                    sh patch2
                                } catch (error) {
                                    echo "rollback aborted"
                                }
                            }
                        }
                    }
                }
            }
        }
    type: JenkinsPipeline
  triggers:
  - github:
      secret: secret101
    type: GitHub
  - generic:
      secret: secret101
    type: Generic
status:
  lastVersion: 0
